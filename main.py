import telebot
from requests import get
from telebot import types
from pymongo import MongoClient
import time
import subprocess
from datetime import datetime, date, timedelta

global index_send
index_send = 0

cluster = MongoClient("mongodb+srv://dbrbase:YqxZgV1GL8s4CVxX@rodinadb.rhew3.mongodb.net/rodinaname?retryWrites=true&w=majority")
db = cluster["rodina"]
users = db["users"]

bot = telebot.TeleBot('5515463608:AAFmyO9G-3Sk9JtUJVmpwOuPdJxgPoopFrM')

@bot.message_handler(commands=['start']) # /start
def start_message(message):
    markup_inline = types.InlineKeyboardMarkup()
    item_one = types.InlineKeyboardButton(text='–ü–æ–≥–Ω–∞–ª–∏!', callback_data='go')

    markup_inline.add(item_one)
    bot.reply_to(message, '*–ü—Ä–∏–≤–µ—Ç, –≥–æ–Ω—â–∏–∫* üòé\n\n–Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ –æ –≤—Å–µ—Ö —É–ª–∏—á–Ω—ã—Ö –≥–æ–Ω–∫–∞—Ö –Ω–∞ —É–ª–∏—Ü–∞—Ö *–ò—Ä–∫—É—Ç—Å–∫–∞* –∏–ª–∏ *–ê–Ω–≥–∞—Ä—Å–∫–∞*, –µ—Å–ª–∏ —Ç—ã —ç—Ç–æ–≥–æ –∑–∞—Ö–æ—á–µ—à—å.'
                  '\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "*–ü–æ–≥–Ω–∞–ª–∏*", —á—Ç–æ –±—ã —è –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–µ–∑–¥–∞—Ö!', parse_mode= "Markdown", reply_markup=markup_inline)

@bot.message_handler(commands=['delete_user']) # –£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_user_from_id(message):
    if message.from_user.id in [330435662, 532678880]:
        try: user_id = int(message.text.split(' ')[1])
        except: bot.reply_to(message, '*–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID*\n\n_–ö –ø—Ä–∏–º–µ—Ä—É: /delete_user 1233457_', parse_mode= "Markdown")
        if users.count_documents({"city": 'Angarsk', "ids": user_id}) == 0:
            bot.reply_to(message, f'*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID({user_id}) –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*', parse_mode= "Markdown")
        else:
            tag = users.find_one({"city": 'Angarsk', "ids": user_id})["tag"]
            users.delete_one({"city": 'Angarsk', "ids": user_id})
            if users.count_documents({"ids": user_id, "type": "going_user"}) != 0:
                users.delete_one({"ids": user_id, "type": "going_user"})
            if users.count_documents({"type": "user_in_rise", "id": message.from_user.id}) != 0:
                users.delete_one({"type": "user_in_rise", "id": message.from_user.id})
            bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tag} __—É–¥–∞–ª—ë–Ω__ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.', parse_mode= "Markdown")

@bot.message_handler(commands=['users']) # –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∞–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def get_users_on_reverse(message):
    if message.from_user.id in [330435662, 532678880]:
        answer = [f'\n[{i["ids"]}]: {i["user_name"]}' for i in users.find({"city": "Angarsk"})]
        if len(answer) == 0: bot.send_message(message.chat.id, f'*–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç*', parse_mode= "Markdown")
        else:
            str_i = ''.join(answer)
            bot.send_message(message.chat.id, f'*–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str_i}*', parse_mode= "Markdown")

@bot.message_handler(commands=['info']) # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ
def get_user_info_by_id(message):
    if message.from_user.id in [330435662, 532678880]:
        text_info = []
        try: user_id = int(message.text.split(' ')[1])
        except: bot.reply_to(message, f'*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ* ID\n\n_–ö –ø—Ä–∏–º–µ—Ä—É: /info {message.from_user.id}_', parse_mode= "Markdown")
        if users.count_documents({"city": 'Angarsk', "ids": user_id}) == 0:
            bot.reply_to(message, f'*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID({user_id}) –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.*', parse_mode= "Markdown")
        else:
            user_inv = users.find_one({"city": 'Angarsk', "ids": user_id})
            text_info.append(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ *{user_inv["user_name"]}*({user_inv["tag"]}):\n\n*1.* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n')
            if users.count_documents({"ids": user_id, "type": "going_user"}) == 0:
                text_info.append('*2.* –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π *–Ω–µ—Ç*.')
            else:
                text_info.append('*2.* –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏:\n')
                auto_users = users.find_one({"ids": user_id, "type": "going_user"})["auto"]
                if auto_users[0] != 1:
                    text_info.append(f'  *‚Ä∫* {auto_users[0]}\n')
                if auto_users[1] != 1:
                    text_info.append(f'  *‚Ä∫* {auto_users[1]}\n')
                if auto_users[2] != 1:
                    text_info.append(f'  *‚Ä∫* {auto_users[2]}\n')
                if auto_users[3] != 1:
                    text_info.append(f'  *‚Ä∫* {auto_users[3]}\n')

            str_info = ''.join(text_info)
            bot.send_message(message.chat.id, str_info, parse_mode= "Markdown")

# –£–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å(–ú–∞—Ä–∫—É)
def user_answer_auto(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '*–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è.*', parse_mode= "Markdown")
    elif len(list(message.text)) < 5:
        bot.send_message(message.chat.id, '*–¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é.* [_–ü—Ä–∏–º–µ—Ä: Tayota Mark II, 2001_]', parse_mode= "Markdown")
    else:
        global marka_auto
        marka_auto = message.text
        gos_number_auto = bot.send_message(message.chat.id, '*–°—É–ø–µ—Ä, –ø—Ä–∏–Ω—è–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n'
                                          '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≥–æ—Å—É—Ä–∞–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è. [_–ü—Ä–∏–º–µ—Ä: –í211–ê–¢38_]', parse_mode= "Markdown")
        bot.register_next_step_handler(gos_number_auto, user_answer_number)

# –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
def user_answer_number(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '*–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è.*', parse_mode= "Markdown")

    elif len(list(message.text)) < 8:
        bot.send_message(message.chat.id, '*–¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.* [_–ü—Ä–∏–º–µ—Ä:_ –í211–ê–¢38]', parse_mode= "Markdown")
    else:
        global number_auto
        number_auto = message.text
        markup_inline = types.InlineKeyboardMarkup()
        item_next = types.InlineKeyboardButton(text='–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ', callback_data='next_step')
        item_reverse = types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='revregist')
        markup_inline.add(item_next, item_reverse)
        bot.send_message(message.chat.id, '*–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n'
                                          '–¢–µ–ø–µ—Ä—å, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n'
                                          f'*1.* –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: __{marka_auto}__'
                                          f'*2.* –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: __{number_auto}__\n\n'
                                          '–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "*–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ*"\n'
                                          '–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏ "*–ü–æ–≤—Ç–æ—Ä–∏—Ç—å*"', parse_mode= "Markdown", reply_markup=markup_inline)

@bot.message_handler(commands=['help']) # /help
def help_command(message):
    markup_inline = types.InlineKeyboardMarkup()
    item_one = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete_help')
    markup_inline.add(item_one)

    if message.from_user.id in [330435662, 532678880]:
        bot.send_message(message.chat.id, '_–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:_'
                                          '\n*/start* ‚Äî –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º'
                                          '\n*/mycar* ‚Äî –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ª–∏—á–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏'
                                          '\n*/editcar* ‚Äî –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω—è –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π'
                                          '\n\n_–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:_'
                                          '\n*–°–æ–∑–¥–∞—Ç—å –≥–æ–Ω–∫—É* ‚Äî –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–æ–Ω–∫—É'
                                          '\n*/users* ‚Äî –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                                          '\n*/info [id]* ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ –ø–æ ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ /users'
                                          '\n*/delete_rise* ‚Äî –£–¥–∞–ª–∏—Ç—å –≥–æ–Ω–∫—É'
                                          '\n*/delete_user id* ‚Äî –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≥–æ–Ω–æ–∫ –ø–æ ID'
                                          '\n*/rise_users* - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –≥–æ–Ω–∫–µ', reply_markup=markup_inline, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '_–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:_'
                                          '\n*/start* ‚Äî –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º'
                                          '\n*/mycar* ‚Äî –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ª–∏—á–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏'
                                          '\n*/editcar* ‚Äî –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω—è –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', reply_markup=markup_inline, parse_mode="Markdown")

@bot.message_handler(commands=['delete_rise']) # –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–∏
def delete_rise_by_owner(message):
    if message.from_user.id in [330435662, 532678880]:
        if users.count_documents({"type": "rise"}) == 0:
            bot.send_message(message.chat.id, '*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏.*', parse_mode= "Markdown")
        else:
            info_rise = users.find_one({"type": "rise"})
            markup_inline = types.InlineKeyboardMarkup()
            item_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='accept_delete_rise')
            item_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='decline_delete_rise')
            markup_inline.add(item_yes, item_no)
            bot.send_message(message.chat.id, f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–æ–Ω–∫—É –Ω–∞ *{info_rise["time_date"]}* –≤ *{info_rise["time_start"]}*?'
                             , parse_mode= "Markdown", reply_markup=markup_inline)

@bot.message_handler(commands=['mycar']) # /mycar
def get_car_user(message):
    text_info = []
    if users.count_documents({"ids": message.from_user.id, "type": "going_user"}) == 0:
        markup_inline = types.InlineKeyboardMarkup()
        item_add = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data='add_auto')
        markup_inline.add(item_add)
        add_auto = bot.send_message(message.chat.id, '*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É –í–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.*\n'
                                          '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "*–î–æ–±–∞–≤–∏—Ç—å*"', parse_mode= "Markdown", reply_markup=markup_inline)
    else:
        text_info.append('*–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –í–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:*\n')
        auto_users = users.find_one({"ids": message.from_user.id, "type": "going_user"})["auto"]
        if auto_users[0] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[0]}\n')
        if auto_users[1] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[1]}\n')
        if auto_users[2] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[2]}\n')
        if auto_users[3] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[3]}\n')

        markup_inline = types.InlineKeyboardMarkup()
        item_add = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data='add_auto')
        item_edit = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit_auto')
        item_delete = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete_auto')
        if len(text_info) - 1 < 4:
            markup_inline.add(item_add, item_edit, item_delete)
        else:
            markup_inline.add(item_edit, item_delete)

        str_text = ''.join(text_info)
        bot.send_message(message.chat.id, str_text, parse_mode= "Markdown", reply_markup=markup_inline)

@bot.message_handler(commands=['editcar']) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
def edit_car_user(message):
    if users.count_documents({"ids": message.from_user.id, "type": "going_user"}) == 0:
        markup_inline = types.InlineKeyboardMarkup()
        item_add = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data='add_auto')
        markup_inline.add(item_add)
        add_auto = bot.send_message(message.chat.id, '*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É –í–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.*\n'
                                          '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "*–î–æ–±–∞–≤–∏—Ç—å*"', parse_mode= "Markdown", reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        item_add = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data='add_auto')
        item_edit = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit_auto')
        item_delete = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete_auto')

        text_info = []
        text_info.append('*–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –í–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:*\n')
        auto_users = users.find_one({"ids": message.from_user.id, "type": "going_user"})["auto"]
        if auto_users[0] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[0]}\n')
        if auto_users[1] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[1]}\n')
        if auto_users[2] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[2]}\n')
        if auto_users[3] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[3]}\n')

        if len(text_info) - 1 >= 4:
            text_info.append('\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ _(4/4)_\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**'
                          '\n*‚Ä∫* __–ò–∑–º–µ–Ω–∏—Ç—å__ –∞–≤—Ç–æ–º–æ–±–∏–ª—å'
                          '\n*‚Ä∫* __–£–¥–∞–ª–∏—Ç—å__ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
            str_text = ''.join(text_info)
            markup_inline.add(item_edit, item_delete)
            bot.send_message(message.chat.id, str_text, parse_mode= "Markdown", reply_markup=markup_inline)
        else:
            markup_inline.add(item_add, item_edit, item_delete)
            text_info.append('\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:'
                             '\n*‚Ä∫* __–î–æ–±–∞–≤–∏—Ç—å__ –∞–≤—Ç–æ–º–æ–±–∏–ª—å'
                             '\n*‚Ä∫* __–ò–∑–º–µ–Ω–∏—Ç—å__ –∞–≤—Ç–æ–º–æ–±–∏–ª—å'
                             '\n*‚Ä∫* __–£–¥–∞–ª–∏—Ç—å__ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
            str_text = ''.join(text_info)
            bot.send_message(message.chat.id, str_text, parse_mode= "Markdown", reply_markup=markup_inline)

@bot.message_handler(commands=['rise_users']) # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–Ω–∫–∏
def get_rise_user_active(message):
    if message.from_user.id in [330435662, 532678880]:
        text_info = ['*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–Ω–∫–∏:*\n\n']
        for user in users.find({"type": "user_in_rise"}):
            text_info.append(f'_{user["tag"]} - {user["auto"]}_\n')

        str_text = ''.join(text_info)
        bot.send_message(message.chat.id, str_text, parse_mode= "Markdown")

@bot.message_handler(commands=['dbi']) # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–Ω–∫–∏
def delete_user_on_rise_by_id(message):
    if message.from_user.id in [330435662, 532678880]:
        if users.count_documents({"type": "user_in_rise", "tag": message.text.split(' ')[1]}) == 0:
            bot.send_message(message.chat.id, '_–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç._', parse_mode= "Markdown")
        else:
            users.delete_one({"type": "user_in_rise", "tag": message.text.split(' ')[1]})
            bot.send_message(message.chat.id, '_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω._', parse_mode= "Markdown")

@bot.callback_query_handler(func=lambda call: True) # –û—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω–ª–∞–π–Ω—ã
def answer(call):
    global index_send
    # –£–¥–∞–ª–µ–Ω–∏–µ /help
    if call.data == 'delete_help': bot.delete_message(call.message.chat.id, call.message.id)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    if call.data == 'go':
        if users.count_documents({"city": 'Angarsk', "ids": call.from_user.id}) == 0:
            users.insert_one({"city": 'Angarsk', "ids": call.from_user.id,
                              'user_name': f'{call.from_user.first_name} {call.from_user.last_name}',
                              "tag": f'@{call.from_user.username}',
                              "type": "–†–∞—Å—Å—ã–ª–∫–∞",
                              "chat_id": call.message.chat.id})

            markup_inline = types.InlineKeyboardMarkup()
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            item_one = types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='register')
            markup_inline.add(item_one)
            item_go = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
            markup_reply.add(item_go)
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!*\n'
                                                   '–¢—ã –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è —Å–µ–π—á–∞—Å, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º\n'
                                                   '–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ü–∏–∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*"\n\n'
                                                   '–¢–∞–∫ –∂–µ, —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ç—É—Ç - */help*', parse_mode= "Markdown", reply_markup=markup_reply)

        else:
            msg = bot.send_message(call.message.chat.id, '–î—Ä—É–∂–∏—â–µ, —è –≤—Å—ë –ø–æ–Ω–∏–º–∞—é, —Å—Ç—Ä–∞—Å—Ç—å –∫ –≥–æ–Ω–∫–∞–º, –Ω–æ —Ç—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É!')
            time.sleep(10)
            bot.delete_message(call.message.chat.id, msg.id)

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ
    if call.data == 'revregist':
        bot.delete_message(call.message.chat.id, call.message.id)
        auto_mark = bot.send_message(call.message.chat.id, '*–ù—É –¥–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –∫–æ–ª–∏ —Ç–µ–±–µ —Ç–∞–∫ —É–≥–æ–¥–Ω–æ.*\n\n'
                                     '–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ:\n'
                                     '*1.* –ú–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: Toyota Mark II, 2001_]\n'
                                     '*2.* –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: –í211–ê–¢38_]\n\n'
                                     '–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –º–∞—Ä–∫–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n'
                                     '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ "*–û—Ç–º–µ–Ω–∞*"', parse_mode= "Markdown")
        bot.register_next_step_handler(auto_mark, user_answer_auto)

    # –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if call.data == 'register':
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, '*–ù—É... –•–æ—Ä–æ—à–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è –ø–æ—Ç–æ–º*\n'
                                               '*–¢–µ–±–µ –æ—Å—Ç–∞—ë—Ç—Å—è –∂–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏!*\n'
                                               '*–î–æ —Å–∫–æ—Ä–æ–≥–æ!*', parse_mode= "Markdown")

    # –£–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if call.data in ['delete_auto', 'edit_auto']:
        markup_inline = types.InlineKeyboardMarkup()
        text_info = []
        text_info.append('*–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –í–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:*\n')
        auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
        if auto_users[0] != 1:
            if call.data.split('_')[0] == 'delete':
                item_one = types.InlineKeyboardButton(text= f'{auto_users[0]}', callback_data='del_auto_one')
            elif call.data.split('_')[0] == 'edit':
                item_one = types.InlineKeyboardButton(text= f'{auto_users[0]}', callback_data='edit_auto_one')
            markup_inline.add(item_one)
            text_info.append(f'  *‚Ä∫* {auto_users[0]}\n')
        if auto_users[1] != 1:
            if call.data.split('_')[0] == 'delete':
                item_two = types.InlineKeyboardButton(text= f'{auto_users[1]}', callback_data='del_auto_two')
            elif call.data.split('_')[0] == 'edit':
                item_two = types.InlineKeyboardButton(text= f'{auto_users[1]}', callback_data='edit_auto_two')
            markup_inline.add(item_two)
            text_info.append(f'  *‚Ä∫* {auto_users[1]}\n')
        if auto_users[2] != 1:
            if call.data.split('_')[0] == 'delete':
                item_three = types.InlineKeyboardButton(text= f'{auto_users[2]}', callback_data='del_auto_three')
            elif call.data.split('_')[0] == 'edit':
                item_three = types.InlineKeyboardButton(text=f'{auto_users[2]}', callback_data='edit_auto_three')
            markup_inline.add(item_three)
            text_info.append(f'  *‚Ä∫* {auto_users[2]}\n')
        if auto_users[3] != 1:
            if call.data.split('_')[0] == 'delete':
                item_four = types.InlineKeyboardButton(text= f'{auto_users[3]}', callback_data='del_auto_four')
            elif call.data.split('_')[0] == 'edit':
                item_four = types.InlineKeyboardButton(text=f'{auto_users[3]}', callback_data='edit_auto_four')
            markup_inline.add(item_four)
            text_info.append(f'  *‚Ä∫* {auto_users[3]}\n')

        if call.data.split('_')[0] == 'delete':
            text_info.append('\n*–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?*')
        elif call.data.split('_')[0] == 'edit':
            text_info.append('\n*–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*')
        str_text = ''.join(text_info)
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, str_text, parse_mode= "Markdown", reply_markup=markup_inline)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ index
    if call.data in ['del_auto_one', 'del_auto_two', 'del_auto_three', 'del_auto_four']:
        index = {"one": 0, "two": 1, "three": 2, "four": 3}
        number_index = call.data.split('_')[2]

        auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
        autoname = auto_users[index[number_index]]
        auto_users.remove(auto_users[index[number_index]])
        auto_users.insert(index[number_index], 1)
        users.update_one({"ids": call.from_user.id, "type": "going_user"}, {"$set": {"auto": auto_users}})
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, f'*–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:* _{autoname}_')

        text_info = []
        text_info.append('*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –í–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:*\n')
        auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
        if auto_users[0] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[0]}\n')
        if auto_users[1] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[1]}\n')
        if auto_users[2] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[2]}\n')
        if auto_users[3] != 1:
            text_info.append(f'  *‚Ä∫* {auto_users[3]}\n')

        str_text = ''.join(text_info)
        bot.send_message(call.message.chat.id, str_text, parse_mode= "Markdown")

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ index
    if call.data in ['edit_auto_one', 'edit_auto_two', 'edit_auto_three', 'edit_auto_four']:
        index = {"one": 0, "two": 1, "three": 2, "four": 3}
        number_index = call.data.split('_')[2]

        auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
        autoname = auto_users[index[number_index]]
        auto_users.remove(auto_users[index[number_index]])
        auto_users.insert(index[number_index], 1)
        users.update_one({"ids": call.from_user.id, "type": "going_user"}, {"$set": {"auto": auto_users}})
        bot.delete_message(call.message.chat.id, call.message.id)
        auto_mark = bot.send_message(call.message.chat.id, f'*–¢–∞–∫-—Å, –∫–∞–∫ —Ö–æ—á–µ—à—å, –º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å* _{autoname}_!\n\n'
                                                           '–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n'
                                                           '*1.* –ú–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: Toyota Mark II, 2001_]\n'
                                                           '*2.* –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: –í211–ê–¢38_]\n\n'
                                                           '*–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –º–∞—Ä–∫–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.*\n\n'
                                                           '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ "*–û—Ç–º–µ–Ω–∞*"', parse_mode= "Markdown")
        bot.register_next_step_handler(auto_mark, user_answer_auto)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if call.data == 'add_auto':
        bot.delete_message(call.message.chat.id, call.message.id)
        auto_mark = bot.send_message(call.message.chat.id, '*–¢–∞–∫-—Å, –Ω—É –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è!*\n\n'
                                                      '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —Ç—ã —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'
                                                      '*1.* –ú–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: Toyota Mark II, 2001_]\n'
                                                      '*2.* –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: –í211–ê–¢38_]\n\n'
                                                      '*–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –º–∞—Ä–∫–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.*\n\n'
                                                      '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ "*–û—Ç–º–µ–Ω–∞*"', parse_mode= "Markdown")
        bot.register_next_step_handler(auto_mark, user_answer_auto)

    # –û–¥–æ–±—Ä–µ–Ω–∏–µ –≥–æ–Ω–∫–∏
    if call.data == 'accept_rise':
        bot.send_message(call.message.chat.id, '*–î–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.*', parse_mode= "Markdown")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        #532678880
        markup_inline = types.InlineKeyboardMarkup()
        item_one = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ', callback_data='in_rise_accept')
        markup_inline.add(item_one)
        text_info = []
        info_rise = users.find_one({"type": "rise", "owner": call.from_user.id})
        text_info.append('*–≠–π, –≤–æ–¥–∏–ª–∞! –£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!*\n–ù–∞–º–µ—á–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –≥–æ–Ω–∫–∞.\n\n'f'   *‚Ä∫* –î–∞—Ç–∞: *{info_rise["time_date"]}*\n'
                         f'   *‚Ä∫* –í—Ä–µ–º—è: *{info_rise["time_start"]}*\n')
        if info_rise["timeout"] != 0: text_info.append(f'   *‚Ä∫* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–µ—Ö–∞—Ç—å —Ç—Ä–µ–∫: *{info_rise["timeout"]}*\n')
        if info_rise["dice"] != 0: text_info.append(f'   *‚Ä∫* –í–∑–Ω–æ—Å —Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: *{info_rise["dice"]}*\n')
        text_info.append('\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ, –Ω–∞–∂–º–∏—Ç–µ "*–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ*"')
        str_text = ''.join(text_info)
        for user in users.find({"type": "–†–∞—Å—Å—ã–ª–∫–∞"}):
            bot.send_message(user["chat_id"], str_text, parse_mode= "Markdown", reply_markup=markup_inline)

    # –û—Ç–º–µ–Ω–∞ –≥–æ–Ω–∫–∏
    if call.data == 'delete_rise':
        users.update_one({"type": "rise", "owner": call.from_user.id}, {"$set": {"dice": 0}})
        users.delete_one({"type": "rise", "owner": call.from_user.id})
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        bot.send_message(call.message.chat.id, '*–û–∫–µ–π, –≥–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!*', parse_mode= "Markdown")

    # –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ
    if call.data == 'in_rise_accept':
        if users.count_documents({"type": "rise"}) == 0:
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–î–∞–Ω–Ω–∞—è –≥–æ–Ω–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞.*', parse_mode= "Markdown")

        elif users.find_one({"type": "rise"})["active"] == 0:
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω—É—é –≥–æ–Ω–∫—É –∑–∞–∫—Ä—ã—Ç–∞*', parse_mode= "Markdown")

        if users.count_documents({"ids": call.from_user.id, "type": "going_user"}) == 0:
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            item_go = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
            markup_reply.add(item_go)
            bot.send_message(call.message.chat.id, '*–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–∞—à–∏–Ω—É.*', parse_mode= "Markdown", reply_markup=markup_reply)

        if users.count_documents({"type": "user_in_rice", "id": call.from_user.id}) != 0:
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ.*')
        else:
            text_info = []
            text_info.append('*–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –≤—ã–±–∏—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ.*\n\n'
                             '*–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –í–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:*\n')
            auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
            markup_inline = types.InlineKeyboardMarkup()
            if auto_users[0] != 1:
                item_one = types.InlineKeyboardButton(text=f'{auto_users[0]}', callback_data='rise_auto_select_one')
                markup_inline.add(item_one)
                text_info.append(f'  *‚Ä∫* {auto_users[0]}\n')
            if auto_users[1] != 1:
                item_two = types.InlineKeyboardButton(text=f'{auto_users[1]}', callback_data='rise_auto_select_two')
                markup_inline.add(item_two)
                text_info.append(f'  *‚Ä∫* {auto_users[1]}\n')
            if auto_users[2] != 1:
                item_three = types.InlineKeyboardButton(text=f'{auto_users[2]}', callback_data='rise_auto_select_three')
                markup_inline.add(item_three)
                text_info.append(f'  *‚Ä∫* {auto_users[2]}\n')
            if auto_users[3] != 1:
                item_four = types.InlineKeyboardButton(text=f'{auto_users[3]}', callback_data='rise_auto_select_four')
                markup_inline.add(item_four)
                text_info.append(f'  *‚Ä∫* {auto_users[3]}\n')

            str_text = ''.join(text_info)
            bot.send_message(call.message.chat.id, str_text, parse_mode= "Markdown", reply_markup=markup_inline)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è
    if call.data == 'user_in_rice':
        if users.count_documents({"type": "user_in_rise", "id": call.from_user.id}) == 0:
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è –í–∞—Å, —Ç–∞–∫ –∫–∞–∫ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ.*', parse_mode= "Markdown")
        else:
            users.update_one({"type": "user_in_rise", "id": call.from_user.id}, {"$set": {"accept": 1}})
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–ü—Ä–∏–Ω—è—Ç–æ, –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ñ–∏–Ω–∏—à–µ!*', parse_mode= "Markdown")

    # –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≥–æ–Ω–∫–∏ –ø–æ index
    if call.data in ['rise_auto_select_one', 'rise_auto_select_two', 'rise_auto_select_three', 'rise_auto_select_four']:
        index = {"one": 0, "two": 1, "three": 2, "four": 3}
        number_index = call.data.split('_')[3]

        text_info = []
        auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
        autoname = auto_users[index[number_index]]
        bot.delete_message(call.message.chat.id, call.message.id)
        user_info = users.find_one({"type": "–†–∞—Å—Å—ã–ª–∫–∞", "ids": call.from_user.id})
        users.insert_one({"type": "user_in_rise", "id": call.from_user.id, "auto": autoname,
                          "user_name": user_info["user_name"], "tag": user_info["tag"],
                          "accept": 0})
        text_info.append(f'*–î–ª—è –≥–æ–Ω–∫–∏ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å:* _{autoname}_\n')

        datetim = list(f'{time.strftime("%H")}:{time.strftime("%M")}')
        if datetim[0] == "0": datetim.remove("0")
        datetimec = ''.join(datetim)
        time_start = users.find_one({"type": "rise"})["time_start"]
        lender = str(timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])) -
                     timedelta(hours=int(datetimec.split(':')[0]), minutes=int(datetimec.split(':')[1])))

        dateday = f'{time.strftime("%d")}.{time.strftime("%m")}.20{time.strftime("%y")}'
        if dateday == users.find_one({"type": "rise"})["time_date"]:
            if int(lender.split(':')[1]) > 59:
                text_info.append('*–¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏.*')
                str_text = ''.join(text_info)
                bot.send_message(call.message.chat.id, str_text, parse_mode= "Markdown")
            else:
                text_info.append(f'*–î–æ —Å—Ç–∞—Ä—Ç–∞ –≥–æ–Ω–∫–∏ –æ—Å—Ç–∞—ë—Ç—Å—è {lender.split(":")[1]} –º–∏–Ω—É—Ç.*\n*–õ–æ–∫–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞:*')
                str_text = ''.join(text_info)
                bot.send_message(call.message.chat.id, str_text, parse_mode= "Markdown")
                time_rise = users.find_one({"type": "rise"})
                bot.send_location(call.from_user.id, time_rise["start_position_latitude"], time_rise["start_position_longitude"])
        else:
            text_info.append('*–¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏.*')
            str_text = ''.join(text_info)
            bot.send_message(call.message.chat.id, str_text, parse_mode= "Markdown")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏
    if call.data == 'accept_delete_rise':
        users.delete_one({"type": "rise"})
        bot.delete_message(call.message.chat.id, call.message.id)
        for i in users.find({"type": "user_in_rise"}):
            users.delete_one({"_id": i["_id"]})
        index_send = 0
        bot.send_message(call.message.chat.id, '*–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –≥–æ–Ω–∫—É.*', parse_mode= "Markdown", reply_markup=types.ReplyKeyboardRemove())

    # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏
    if call.data == 'decline_delete_rise': bot.delete_message(call.message.chat.id, call.message.id)

    # –ó–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑—É
    if call.data == 'next_step':
        if users.count_documents({"ids": call.from_user.id, "type": "going_user"}) == 0:
            users.insert_one({"ids": call.from_user.id, "type": "going_user", "auto": [f"{marka_auto} | [ {number_auto} ]", 1, 1, 1]})
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, '*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!*\n'
                                                   f'–¢–µ–ø–µ—Ä—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å *{marka_auto}* —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º *{number_auto}*\n\n'
                                                   f'*–î–æ –≤—Å—Ç—Ä–µ—á–∏!*', parse_mode= "Markdown")
        else:
            auto_users = users.find_one({"ids": call.from_user.id, "type": "going_user"})["auto"]
            for i in auto_users:
                if i == 1:
                    index = auto_users.index(i)
                    auto_users.remove(auto_users[index])
                    auto_users.insert(index, f"{marka_auto} | [ {number_auto} ]")
                    users.update_one({"ids": call.from_user.id, "type": "going_user"}, {"$set": {"auto": auto_users}})
                    bot.delete_message(call.message.chat.id, call.message.id)
                    bot.send_message(call.message.chat.id, '*–°—É–ø–µ—Ä!*\n'
                                                           f'–¢–µ–ø–µ—Ä—å –≤ —Ç–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å *{marka_auto}* —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º *{number_auto}*\n\n'
                                                           f'*–î–æ –≤—Å—Ç—Ä–µ—á–∏!*', parse_mode= "Markdown")
                    break

# –ú–µ—Å—Ç–æ —Å—Ç–∞—Ä—Ç–∞(–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è)
def dot_starter(message):
    if message.content_type != 'location':
        msg_dot_start = bot.send_message(message.chat.id, '*–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è.*', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_dot_start, dot_starter)
    else:
        users.insert_one({"type": "rise", "owner": message.from_user.id, "time_start": 1, "dice": 1, "timeout": 1, "time_date": 1,
                          "start_position_latitude": message.json["location"]["latitude"],
                          "start_position_longitude": message.json["location"]["longitude"],
                          "end_position_latitude": 1, "end_position_longitude": 1, "active": 1})
        msg_dot_finish = bot.send_message(message.chat.id, '*–°—É–ø–µ—Ä!*\n–õ–æ–∫–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n'
                                          '*–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Ñ–∏–Ω–∏—à–∞.*', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_dot_finish, dot_finisher)

# –ú–µ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∞ (–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è)
def dot_finisher(message):
    if message.content_type != 'location':
        msg_dot_finish = bot.send_message(message.chat.id, '*–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è.*', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_dot_finish, dot_finisher)
    else:
        users.update_one({"type": "rise", "owner": message.from_user.id},
                         {"$set": {"end_position_latitude": message.json["location"]["latitude"],
                                   "end_position_longitude": message.json["location"]["longitude"]}})
        msg_date = bot.send_message(message.chat.id, '*–°—É–ø–µ—Ä!*\n–õ–æ–∫–∞—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∏—à–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n'
                                                           '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ [_–î–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥, —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥_].'
                                                           '\n_–ü—Ä–∏–º–µ—Ä: 25.07.2022_', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_date, date_start_rise)

# –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞
def date_start_rise(message):
    if len([i for i in list(message.text) if i == '.']) <= 1:
        msg_dot_finish = bot.send_message(message.chat.id, '*–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞:* –¥–¥.–º–º.–≥–≥\n'
                                          '_–ü—Ä–∏–º–µ—Ä: 25.07.2022_', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_dot_finish, date_start_rise)
    else:
        users.update_one({"type": "rise", "owner": message.from_user.id}, {"$set": {"time_date": message.text}})
        msg_time = bot.send_message(message.chat.id, '*–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!*\n\n'
                                                     '–¢–µ–ø–µ—Ä—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ [—á—á.–º–º]\n_–ü—Ä–∏–º–µ—Ä: 22:00_', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_time, time_rise_start)

#–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
def time_rise_start(message):
    if len([i for i in list(message.text) if i == ':']) < 1:
        msg_time = bot.send_message(message.chat.id, '*–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∞—Ç–∞:* —á—á.–º–º\n'
                                          '_–ü—Ä–∏–º–µ—Ä: 20:00_', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_time, time_rise_start)
    else:
        users.update_one({"type": "rise", "owner": message.from_user.id}, {"$set": {"time_start": message.text}})
        msg_timeout = bot.send_message(message.chat.id, '*–û—Ç–ª–∏—á–Ω–æ! –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!*\n\n'
                                                     '–¢–µ–ø–µ—Ä—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞—Å—Å—ã.[–∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç]\n'
                                                     '_–ü—Ä–∏–º–µ—Ä: 30_\n\n'
                                                     '*–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–∫–∞–∂–∏:* 0')
        bot.register_next_step_handler(msg_timeout, rise_timeout)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
def rise_timeout(message):
    try: msg = int(message.text)
    except:
        msg_timeout = bot.send_message(message.chat.id, '*–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —á–∏—Å–ª–æ*\n_–ü—Ä–∏–º–µ—Ä: 30_')
        bot.register_next_step_handler(msg_timeout, rise_timeout)
    else:
        if int(message.text) == 0:
            users.update_one({"type": "rise", "owner": message.from_user.id}, {"$set": {"timeout": '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}})
            msg_dice = bot.send_message(message.chat.id, '*–ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã –æ—Ç–º–µ–Ω—ë–Ω.*\n\n'
                                                         '–¢–µ–ø–µ—Ä—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤–∑–Ω–æ—Å–∞ —Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. *[—Å—É–º–º–∞]*\n_–ü—Ä–∏–º–µ—Ä: 1000 —Ä—É–±–ª–µ–π_\n\n'
                                                         '*–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–∫–∞–∂–∏:* 0', parse_mode= "Markdown")
        else:
            users.update_one({"type": "rise", "owner": message.from_user.id}, {"$set": {"timeout": int(message.text)}})
            msg_dice = bot.send_message(message.chat.id, '*–ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.*\n\n'
                                                         '–¢–µ–ø–µ—Ä—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤–∑–Ω–æ—Å–∞ —Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. *[—Å—É–º–º–∞]*\n_–ü—Ä–∏–º–µ—Ä: 1000 —Ä—É–±–ª–µ–π_\n\n'
                                                         '*–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–∫–∞–∂–∏:* 0', parse_mode= "Markdown")
        bot.register_next_step_handler(msg_dice, rise_dice_on_ex)

# –í–∑–Ω–æ—Å –∏ –≤—ã–≤–æ–¥
def rise_dice_on_ex(message):
    text_info = []
    if message.text == "0":
        users.update_one({"type": "rise", "owner": message.from_user.id}, {"$set": {"dice": '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}})
        text_info.append('*–•–æ—Ä–æ—à–æ. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –≤–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ.*\n\n')
    else:
        users.update_one({"type": "rise", "owner": message.from_user.id}, {"$set": {"dice": message.text}})
        text_info.append('*–°—É–ø–µ—Ä! –°—É–º–º–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!*\n\n')

    info_rise = users.find_one({"type": "rise", "owner": message.from_user.id})
    text_info.append('*—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ:*\n'
                     f'   *‚Ä∫* –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏: _{info_rise["time_date"]}_\n'
                     f'   *‚Ä∫* –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏: _{info_rise["time_start"]}_\n'
                     f'   *‚Ä∫* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–µ—Ö–∞—Ç—å —Ç—Ä–µ–∫: _{info_rise["timeout"]} –º–∏–Ω—É—Ç_\n'
                     f'   *‚Ä∫* –í–∑–Ω–æ—Å —Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: _{info_rise["dice"]}_')
    str_text = ''.join(text_info)
    bot.send_message(message.chat.id, str_text, parse_mode= "Markdown")
    bot.send_message(message.chat.id, '*–ú–µ—Å—Ç–æ —Å—Ç–∞—Ä—Ç–∞:*', parse_mode= "Markdown")
    bot.send_location(message.chat.id, info_rise["start_position_latitude"], info_rise["start_position_longitude"])
    bot.send_message(message.chat.id, '*–ú–µ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∞:*', parse_mode= "Markdown")
    bot.send_location(message.chat.id, info_rise["end_position_latitude"], info_rise["end_position_longitude"])
    markup_inline = types.InlineKeyboardMarkup()
    item_yes = types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='accept_rise')
    item_no = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='delete_rise')
    markup_inline.add(item_yes, item_no)
    bot.send_message(message.chat.id, '*–í—Å—ë –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ?*', parse_mode= "Markdown", reply_markup=markup_inline)

def on_ready():
    print('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ÄÉ‚ÄÉ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë\n'
          '‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ÄÉ‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\n'
          '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ÄÉ‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë\n'
          '‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ÄÉ‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë\n'
          '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ÄÉ‚ÄÉ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\n'
          '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ÄÉ‚ÄÉ‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë')
    bot.send_message(-792645565, 'active bro')

@bot.message_handler(content_types=['text']) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_text(message):
    global index_send
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç': bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç–∏–∫)')

    if message.text.lower() == '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!':
        if users.count_documents({"ids": message.from_user.id, "type": "going_user"}) != 0:
            bot.send_message(message.chat.id, '*–•–º.. –í—ã —É–∂–µ –µ—Å—Ç—å –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!*\n*–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /editcar*', parse_mode= "Markdown")
        else:
            auto_mark = bot.send_message(message.chat.id, '*–¢–∞–∫-—Å, –Ω—É –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è!*\n\n'
                                              '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —Ç—ã —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'
                                              '*1.* –ú–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: Toyota Mark II, 2001_]\n'
                                              '*2.* –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è [_–ü—Ä–∏–º–µ—Ä: –í211–ê–¢38_]\n\n'
                                              '–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –º–∞—Ä–∫–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n'
                                              '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–≤–µ–¥–∏ "*–û—Ç–º–µ–Ω–∞*"', parse_mode= "Markdown", reply_markup = types.ReplyKeyboardRemove())
            bot.register_next_step_handler(auto_mark, user_answer_auto)

    if message.text == '–°–æ–∑–¥–∞—Ç—å –≥–æ–Ω–∫—É':
        if message.from_user.id in [330435662, 532678880]:
            if users.count_documents({"type": "rise"}) != 0:
                bot.send_message(message.chat.id, '*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≥–æ–Ω–∫–∞.*\n'
                                                  '*–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_rise*', parse_mode= "Markdown")
            else:
                msg_start = bot.send_message(message.chat.id, '–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–Ω–∫–∏!'
                                                  '\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                                  '   *‚Ä∫* –ú–µ—Å—Ç–æ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏ *[Geo-Location]*\n'
                                                  '   *‚Ä∫* –ú–µ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∞ –≥–æ–Ω–∫–∏ *[Geo-Location]*\n'
                                                  '   *‚Ä∫* –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ *[–¥–¥.–º–º.–≥–≥–≥–≥]*\n'
                                                  '   *‚Ä∫* –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ *[–º–∏–Ω—É—Ç—ã]*\n'
                                                  '   *‚Ä∫* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–µ—Ö–∞—Ç—å —Ç—Ä–µ–∫ *[—á—á.–º–º]* | –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n'
                                                  '   *‚Ä∫* –í–∑–Ω–æ—Å —Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ *[–°—É–º–º–∞]* | –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è', parse_mode= "Markdown")
                msg_dot_start = bot.send_message(message.chat.id,
                                                 '*–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å –º–µ—Å—Ç–æ–º —Å—Ç–∞—Ä—Ç–∞\n–ü–æ—Å—Ç–∞–≤—å –º–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.*', parse_mode= "Markdown")
                bot.register_next_step_handler(msg_dot_start, dot_starter)

    if message.text == 'AAA^@!HJCGABISJDI@&!LKA:SKD<AW':
        bot.send_message(message.chat.id, '*–ü—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–≤–µ—Ä—è—é –≤—Ä–µ–º—è*', parse_mode= "Markdown")
        if users.count_documents({"type": "rise"}) != 0 and users.find_one({"type": "rise"})["time_start"] != 1:
            time_rise = users.find_one({"type": "rise"})
            datetim = list(f'{time.strftime("%H")}:{time.strftime("%M")}')
            if datetim[0] == "0": datetim.remove("0")
            datetimec = ''.join(datetim)
            datetime = users.find_one({"type": "rise"})["time_start"]
            dateday = f'{time.strftime("%d")}.{time.strftime("%m")}.20{time.strftime("%y")}'

            time_start = time_rise["time_start"]

            time_give_location_x = str(timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])) - timedelta(minutes=5))
            time_give_location = f'{time_give_location_x.split(":")[0]}:{time_give_location_x.split(":")[1]}'

            time_start_five_x = str(timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])) - timedelta(minutes=30))
            time_start_five = f'{time_start_five_x.split(":")[0]}:{time_start_five_x.split(":")[1]}'

            accept_time_start_X = str(timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])) + timedelta(minutes=5))
            accept_time_start = f'{accept_time_start_X.split(":")[0]}:{accept_time_start_X.split(":")[1]}'

            end_rice_x = str(timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])) + timedelta(minutes=20))
            end_rice = f'{end_rice_x.split(":")[0]}:{end_rice_x.split(":")[1]}'

            time_finish = 0

            if dateday == time_rise["time_date"]:

                lender = str(timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])) -
                             timedelta(hours=int(datetimec.split(':')[0]), minutes=int(datetimec.split(':')[1])))

                if lender.split(':')[1] == '59' or int(lender.split(':')[1]) < 59:
                    if index_send < 1:
                        for user in users.find({"type": "user_in_rise"}):
                            index_send = 1
                            bot.send_message(user["id"], f"*–í–Ω–∏–º–∞–Ω–∏–µ, –≥–æ–Ω–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {lender.split(':')[1]} –º–∏–Ω—É—Ç!*\n*–õ–æ–∫–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞:*", parse_mode= "Markdown")
                            bot.send_location(user["id"], time_rise["start_position_latitude"], time_rise["start_position_longitude"])

                if datetimec == time_give_location:
                    if index_send < 2:
                        index_send = 2
                        if len([i["tag"] for i in users.find({"type": "user_in_rise"})]) < 1:
                            for user in users.find({"type": "user_in_rise"}):
                                bot.send_message(user["id"], f"*–í–Ω–∏–º–∞–Ω–∏–µ, –≥–æ–Ω–∫–∞ –Ω–∞ {time_rise['time_date']}({time_rise['time_start']}) –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑ –∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.*\n"
                                                                  f"*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≥–æ–Ω–∫–∏, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 4-—Ö*\n\n"
                                                                  f"*–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –≥–æ–Ω–∫–∞—Ö!*", parse_mode= "Markdown")
                                bot.send_message(-1001618170960,
                                                 f"*–í–Ω–∏–º–∞–Ω–∏–µ, –≥–æ–Ω–∫–∞ –Ω–∞ {time_rise['time_date']}({time_rise['time_start']}) –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑ –∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.*", parse_mode= "Markdown")
                                index_send = 0
                                users.delete_one({"type": "rise"})
                        else:
                            for user in users.find({"type": "user_in_rise"}):
                                markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                                item_finish = types.KeyboardButton('üèÅ –ù–∞ —Ñ–∏–Ω–∏—à–µ')
                                item_dtp = types.KeyboardButton('‚ìÇ –ü–æ–ø–∞–ª –≤ –î–¢–ü')
                                item_teh = types.KeyboardButton('‚ùó –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞')
                                markup_reply.add(item_finish, item_dtp)
                                markup_reply.add(item_teh)
                                bot.send_message(user["id"], f"*–í–Ω–∏–º–∞–Ω–∏–µ, –≥–æ–Ω–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!*\n"
                                                             f"–ü–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞, —Ç–µ–±–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '*–ï–¥—É*' –≤ —Ç–µ—á–µ–Ω–∏–∏ *5-—Ç–∏ –º–∏–Ω—É—Ç*, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ.\n"
                                                             f"\n*–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ñ–∏–Ω–∏—à–µ.*\n\n*–ö—Å—Ç–∞—Ç–∏, –ª–æ–∫–∞—Ü–∏—è —Ñ–∏–Ω–∏—à–∞:*", parse_mode= "Markdown")
                                bot.send_location(user["id"], time_rise["end_position_latitude"], time_rise["end_position_longitude"])
                                bot.send_message(user["id"], '*–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã 3 –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –∫–∞–∂–¥—É—é.*\n\n'
                                                             'üèÅ *–ù–∞ —Ñ–∏–Ω–∏—à–µ* - –≠—Ç—É –∫–Ω–æ–ø–∫—É —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.\n'
                                                             '‚ìÇ *–ü–æ–ø–∞–ª –≤ –î–¢–ü* - –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç—ã –ø–æ–ø–∞–ª –≤ –î–¢–ü, –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –Ω–∞–º –æ–± —ç—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É\n'
                                                             '‚ùó *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞* - –ï—Å–ª–∏ —É —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∂–º–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É!',
                                                 parse_mode= "Markdown", reply_markup=markup_reply)

                elif datetimec == time_start:
                    if index_send < 3:
                        for user in users.find({"type": "user_in_rise"}):
                            index_send = 3
                            markup_inline = types.InlineKeyboardMarkup()
                            item_one = types.InlineKeyboardButton(text='–ï–¥—É',
                                                                  callback_data='user_in_rice')
                            markup_inline.add(item_one)
                            bot.send_message(user["id"], f"–ü–û–ì–ù–ê–õ–ò–ò–ò–ò–ò–ò–ò–ò–ò!!!!!!!!!!!!!!!!!!!!!\n\n"
                                                         f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ï–¥—É'", reply_markup=markup_inline)

                elif datetimec == accept_time_start:
                    if index_send < 4:
                        index_send = 4
                        for user in users.find({"type": "user_in_rise"}):
                            if user["accept"] == 0:
                                users.delete_one({"type": "user_in_rice", "_id": user["_id"]})
                                bot.send_message(user["id"], '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ –∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã.\n\n'
                                                             '–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–µ–∑–¥–µ!', reply_markup = types.ReplyKeyboardRemove())

                elif time_rise["timeout"] != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                    time_finish_x = str(timedelta(hours=int(time_rise["time_start"].split(':')[0]), minutes=int(time_rise["time_start"].split(':')[1]))
                                        + timedelta(minutes=int(time_rise["timeout"])))
                    time_finish = f'{time_finish_x.split(":")[0]}:{time_finish_x.split(":")[1]}'
                    if datetimec == time_finish:
                        for user in users.find({"type": "user_in_rise"}):
                            if user["accept"] == 1:
                                bot.send_message(user["id"], '–ì–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n'
                                                             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É—Å–ø–µ–ª –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤–µ—Å—å –µ—ë —É—á–∞—Å—Ç–æ–∫ –∏ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞—Ç—å.\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!.',
                                                             reply_markup=types.ReplyKeyboardRemove())
                            else:
                                bot.send_message(user["id"], '–ì–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n'
                                                             '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –í—ã —É—Å–ø–µ–ª–∏ –µ—ë –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å.\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!.',
                                                             reply_markup=types.ReplyKeyboardRemove())
                            users.delete_one({"type": "user_in_rise", "_id": user["_id"]})
                        users.delete_one({"type": "rise"})
                        bot.send_message(-1001618170960, '–ì–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.')
                        index_send = 0

                elif datetimec == end_rice:
                    for user in users.find({"type": "user_in_rise"}):
                        bot.send_message(user["id"],'–ì–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=types.ReplyKeyboardRemove())
                        users.delete_one({"type": "user_in_rise", "_id": user["_id"]})
                    users.delete_one({"type": "rise"})
                    bot.send_message(-1001618170960, '–ì–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
                    index_send = 0

                if lender.split(':')[1] == '30' or int(lender.split(':')[1]) < 30: users.update_one({"type": "rise"}, {
                    "$set": {"active": 0}})

    if message.text == 'üèÅ –ù–∞ —Ñ–∏–Ω–∏—à–µ':
        if users.count_documents({"type": "rise"}) == 0 or users.find_one({"type": "user_in_rise", "id": message.from_user.id})["accept"] == 0:
            bot.send_message(message.chat.id, '*–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ ‚Ññ4*\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏:\n *- –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–Ω–æ–∫.*'
                                              '\n *- –í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ.*\n *- –í–∞–º–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–¢–ü" –∏–ª–∏ "–¢–µ—Ö.–ù–µ–ø–æ–ª–∞–¥–∫–∞"*')
        else:
            # "finish_time": 0, "time_rice_going": 0
            datetim = list(f'{time.strftime("%H")}:{time.strftime("%M")}')
            if datetim[0] == "0": datetim.remove("0")
            datetimec = ''.join(datetim)
            time_start = users.find_one({"type": "rise"})["time_start"]
            time_finish_x = str(timedelta(hours=int(datetimec.split(':')[0]), minutes=int(datetimec.split(':')[1])) - timedelta(hours=int(time_start.split(':')[0]), minutes=int(time_start.split(':')[1])))
            time_finish = f'{time_finish_x.split(":")[0]}:{time_finish_x.split(":")[1]}'

            users.update_one({"type": "user_in_rise", "id": message.from_user.id}, {"$set": {"accept": 0}})
            users.insert_one({"type": "results", "id": message.from_user.id, "start_time": time_start, "finish_time": datetimec, "time_rice_going": time_finish})
            bot.send_message(message.chat.id, f'*–°—É–ø–µ—Ä!*\n*–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Ñ–∏–Ω–∏—à:* __{datetimec}__\n\n'
                                              f'*–î–∞–Ω–Ω–∞—è –≥–æ–Ω–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —Ç–æ–±–æ–π –∑–∞ {time_finish} –º–∏–Ω—É—Ç.*\n\n*–î–æ –≤—Å—Ç—Ä–µ—á–∏!*',
                             parse_mode= "Markdown", reply_markup=types.ReplyKeyboardRemove())

    if message.text == '‚ìÇ –ü–æ–ø–∞–ª –≤ –î–¢–ü':
        if users.count_documents({"type": "rise"}) == 0 or users.find_one({"type": "user_in_rise", "id": message.from_user.id})["accept"] == 0:
            bot.send_message(message.chat.id, '*–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ ‚Ññ4*\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏:\n *- –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–Ω–æ–∫.*'
                                              '\n *- –í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ.*\n *- –í–∞–º–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–¢–ü" –∏–ª–∏ "–¢–µ—Ö.–ù–µ–ø–æ–ª–∞–¥–∫–∞"*', parse_mode= "Markdown")
        else:
            bot.send_message(message.chat.id, '*–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏ –Ω–∞–º –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.*\n'
                                              '*–Ø –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –µ—ë –≤ —á–∞—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.*\n\n'
                                              '*–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ –¥–∞–Ω–Ω–æ–π –≥–æ–Ω–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*', parse_mode= "Markdown", reply_markup=types.ReplyKeyboardRemove())
            user = users.find_one({"type": "user_in_rise", "id": message.from_user.id})
            users.update_one({"type": "user_in_rise", "id": message.from_user.id}, {"$set": {"accept": 0}})
            bot.send_message(-1001618170960, f'*–í–Ω–∏–º–∞–Ω–∏–µ!*\n*–£—á–∞—Å—Ç–Ω–∏–∫–æ–º {user["tag"]} –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–ø–∞–ª –≤ –î–¢–ü".*', parse_mode= "Markdown")

    if message.text == '‚ùó –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞':
        if users.count_documents({"type": "rise"}) == 0 or users.find_one({"type": "user_in_rise", "id": message.from_user.id})["accept"] == 0:
            bot.send_message(message.chat.id, '*–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ ‚Ññ4*\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏:\n *- –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–Ω–æ–∫.*'
                                              '\n *- –í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–µ.*\n *- –í–∞–º–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–¢–ü" –∏–ª–∏ "–¢–µ—Ö.–ù–µ–ø–æ–ª–∞–¥–∫–∞"*', parse_mode= "Markdown")
        else:
            bot.send_message(message.chat.id, '*–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏ –Ω–∞–º –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.*\n'
                                              '*–Ø –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –µ—ë –≤ —á–∞—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.*\n\n'
                                              '*–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ –¥–∞–Ω–Ω–æ–π –≥–æ–Ω–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*', parse_mode= "Markdown", reply_markup=types.ReplyKeyboardRemove())
            user = users.find_one({"type": "user_in_rise", "id": message.from_user.id})
            users.update_one({"type": "user_in_rise", "id": message.from_user.id}, {"$set": {"accept": 0}})
            bot.send_message(-1001618170960, f'*–í–Ω–∏–º–∞–Ω–∏–µ!*\n*–£—á–∞—Å—Ç–Ω–∏–∫–æ–º {user["tag"]} –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞".*', parse_mode= "Markdown")

    if message.text == 'test':
        markup_inline = types.InlineKeyboardMarkup()
        item_yes = types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='accept_rise')
        item_no = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='delete_rise')
        markup_inline.add(item_yes, item_no)
        bot.send_message(message.chat.id, '*test*'
                                          '\n*/test testtesttesttesttesttesttest tes ttesttesttesttesttest*'
                                          '\n_/test testtesttebstte sttestte sttesttesttes ttesttesttesttesttest_'
                                          '\n_/test testtesttestt es ttest t e sttest testtesttesttesttesttesttest_'
                                          '\n_/test testtesttestt est testtesttestt e sttesttest testtesttesttest_'
                                          '\n_/test testtesttesttesttesttesttesttesttest sttesttesttesttesttest_'
                                          '\n_/test testtesttestte sttest testtesttesttesttesttesttesttesttest_'
                                          '\n_/test testtesttesttesttes  ttesttestt esttesttestt esttesttesttest_'
                                          '\n_/test testtesttesttes testtesttes ttesttesttesttesttesttesttest_'
                                          '\n_/test testtesttesttestte sttesttes  ttes ttes ttes ttesttesttesttest_'
                                          '\n_/test testtesttesttesttesttesttesttesttest testtesttesttesttest_', reply_markup=markup_inline, parse_mode="Markdown")
    else:
        if message.chat.id == bot.user.id:
            bot.send_message(message.chat.id, '*–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å.*\n*–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –≤ –∫–æ–º–∞–Ω–ª–µ /help*', parse_mode= "Markdown")

if __name__ == '__main__':
    on_ready()
    bot.polling(none_stop=True, interval=0)
